<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>pentest on Embrace The Red</title>
    <link>https://embracethered.com/blog/tags/pentest/</link>
    <description>Recent content in pentest on Embrace The Red</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>(c) WUNDERWUZZI 2018-2022</copyright>
    <lastBuildDate>Sun, 26 Jun 2022 22:50:18 -0800</lastBuildDate>
    
	<atom:link href="https://embracethered.com/blog/tags/pentest/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Post Exploitation: Sniffing Logon Passwords with PAM</title>
      <link>https://embracethered.com/blog/posts/2022/post-exploit-pam-ssh-password-grabbing/</link>
      <pubDate>Sun, 26 Jun 2022 22:50:18 -0800</pubDate>
      
      <guid>https://embracethered.com/blog/posts/2022/post-exploit-pam-ssh-password-grabbing/</guid>
      <description>Pluggable Authentication Modules (PAM) on Unix based systems are useful to change logon behavior and enforce authentication via various means.
In &amp;ldquo;Red Team Strategies&amp;rdquo; the chapter &amp;ldquo;Protecting the Pentester&amp;rdquo; walks the reader through the configuration of a PAM module to get notified in real-time via a pop-up when someone logs on to the machine (e.g. system compromise).
But there are also bad things that can be done with PAM (especially post-exploitation) and this is what this post is about.</description>
    </item>
    
    <item>
      <title>Customized Hacker Shell Prompts</title>
      <link>https://embracethered.com/blog/posts/2022/hacker-shell-prompts/</link>
      <pubDate>Sat, 28 May 2022 14:00:54 -0700</pubDate>
      
      <guid>https://embracethered.com/blog/posts/2022/hacker-shell-prompts/</guid>
      <description>As the saying goes, a picture is worth a thousand words.
In order to improve your documentation and uplevel red team and pentest reporting, it&amp;rsquo;s useful to add date and time information to screenshots and script logs.
This helps the Blue Team (and yourself) reviewing past activity, reports and when deconflicting activity is required. Depending on the shell that is used there are different ways to go about it. Let&amp;rsquo;s cover three common ones.</description>
    </item>
    
    <item>
      <title>Grabbing and cracking macOS hashes</title>
      <link>https://embracethered.com/blog/posts/2022/grabbing-and-cracking-macos-hashes/</link>
      <pubDate>Sun, 03 Apr 2022 10:46:07 -0700</pubDate>
      
      <guid>https://embracethered.com/blog/posts/2022/grabbing-and-cracking-macos-hashes/</guid>
      <description>Information for red teaming macOS and info on real world TTPs are still a bit sparse. That makes it difficult for defenders to know what attackers do on macOS compared to Windows. Some organizations might have a bigger blind spot when it comes to macOS.
This post describes how an adversary can grab hashes from a macOS machine, how to convert it to a hashcat friendly format and use hashcat to crack it.</description>
    </item>
    
    <item>
      <title>AWS Scaled Command Bash Script - Run AWS commands for many profiles</title>
      <link>https://embracethered.com/blog/posts/2022/aws-scaled-command/</link>
      <pubDate>Sat, 12 Mar 2022 10:42:14 -0800</pubDate>
      
      <guid>https://embracethered.com/blog/posts/2022/aws-scaled-command/</guid>
      <description>One area that I have encountered quite often over the years is that during recon phase of a bug bounty hunt or pentest a set of AWS access keys are being discovered.
Let&amp;rsquo;s say you found 50 AWS access keys by drooling and hunting through public Github repos and using other nifty tricks and means.
How do you go about checking their validity? And what do they have access to and provide the Bug Bounty Program or Blue Team the dates, times, and IP address when those keys were used?</description>
    </item>
    
    <item>
      <title>Gitlab Reconnaissance Introduction</title>
      <link>https://embracethered.com/blog/posts/2022/hacking-gitlab-servers/</link>
      <pubDate>Mon, 28 Feb 2022 04:22:22 -2222</pubDate>
      
      <guid>https://embracethered.com/blog/posts/2022/hacking-gitlab-servers/</guid>
      <description>Although Gitlab is not as popular as Github, itâ€™s common to run across it these days. Especially after Microsoft acquired Github it seemed more individuals and organizations flocked over to Gitlab.
In this post I want to document a couple of recon commands that are useful post-exploitation, and for blue teamers to watch out for.
Let&amp;rsquo;s assume one has access to a Gitlab Token as a precursor. Let&amp;rsquo;s walk through some interesting commands and script snippets to leverage to find out more.</description>
    </item>
    
    <item>
      <title>Log4Shell and Request Forgery Attacks</title>
      <link>https://embracethered.com/blog/posts/2022/log4shell-and-request-forgery-attacks/</link>
      <pubDate>Tue, 04 Jan 2022 15:18:18 -0800</pubDate>
      
      <guid>https://embracethered.com/blog/posts/2022/log4shell-and-request-forgery-attacks/</guid>
      <description>The last weeks of 2021 got quite interesting for security professionals and software engineers.
Apache&amp;rsquo;s log4j library and its now prominent Java Naming and Directory Interface support, which enables easy remote code execution, made the news across the industry.
What makes Log4Shell scary is the widespread adoption of the Log4j library amongst Java applications, and the ease of remote exploitation.
A dangerous combination.
Patches got released, bypasses were discovered more patches were released and so forth.</description>
    </item>
    
    <item>
      <title>Offensive BPF: Understanding and using bpf_probe_write_user</title>
      <link>https://embracethered.com/blog/posts/2021/offensive-bpf-libbpf-bpf_probe_write_user/</link>
      <pubDate>Wed, 20 Oct 2021 00:04:40 -0700</pubDate>
      
      <guid>https://embracethered.com/blog/posts/2021/offensive-bpf-libbpf-bpf_probe_write_user/</guid>
      <description>This post is part of a series about Offensive BPF to learn how BPFs use will impact offensive security, malware, and detection engineering.
Click the &amp;ldquo;ebpf&amp;rdquo; tag to see all relevant posts.
Building advanced BPF programs So far in this Offensive BPF series the focus was on bpftrace to build and run BPF programs.
The next thing I wanted to investigate is what options are available to modify data structures during BPF execution.</description>
    </item>
    
    <item>
      <title>Offensive BPF: Sniffing Firefox traffic with bpftrace</title>
      <link>https://embracethered.com/blog/posts/2021/offensive-bpf-sniffing-traffic-bpftrace/</link>
      <pubDate>Thu, 14 Oct 2021 00:10:16 -0700</pubDate>
      
      <guid>https://embracethered.com/blog/posts/2021/offensive-bpf-sniffing-traffic-bpftrace/</guid>
      <description>This post is part of a series about Offensive BPF that I&amp;rsquo;m working on to learn how BPFs use will impact offensive security, malware, and detection engineering.
Click the &amp;ldquo;ebpf&amp;rdquo; tag to see all relevant posts.
One of the issues I ran into when trying out sslsniff-bpfcc was that it did not work with Firefox or Chrome traffic.
This post is about me learning how to hook user space APIs with bpftrace using uprobes.</description>
    </item>
    
    <item>
      <title>Video: What is Tabnabbing?</title>
      <link>https://embracethered.com/blog/posts/2021/what-is-tab-nabbing/</link>
      <pubDate>Sun, 10 Oct 2021 10:10:51 -0700</pubDate>
      
      <guid>https://embracethered.com/blog/posts/2021/what-is-tab-nabbing/</guid>
      <description>Tabnabbing is a web application security vulnerability that can be used to perform phishing attacks, so its important to be aware of it as a developer and penetration tester.
It is easy to mitigate and in this short video we cover both attacks and mitigations.

Thanks for reading and happy hacking!
@wunderwuzzi23</description>
    </item>
    
    <item>
      <title>Offensive BPF: What&#39;s in the bpfcc-tools box?</title>
      <link>https://embracethered.com/blog/posts/2021/offensive-bpf-handy-tools/</link>
      <pubDate>Sat, 09 Oct 2021 14:00:59 -0700</pubDate>
      
      <guid>https://embracethered.com/blog/posts/2021/offensive-bpf-handy-tools/</guid>
      <description>This post is part of a series about Offensive BPF that I&amp;rsquo;m working on to learn about BPF to understand attacks and defenses. Click the &amp;ldquo;ebpf&amp;rdquo; tag to see all relevant posts.
In the previous posts I spend time learning about bpftrace which is quite powerful. This post is focused on basics and using existing BPF tools, rather then building new BPF programs from scratch.
Living off the land: bpfcc-tools Performance and observability teams are pushing for BPF tooling to be present in production.</description>
    </item>
    
    <item>
      <title>Offensive BPF: Using bpftrace to host backdoors</title>
      <link>https://embracethered.com/blog/posts/2021/offensive-bpf-bpftrace-message-based/</link>
      <pubDate>Wed, 06 Oct 2021 20:00:13 -0700</pubDate>
      
      <guid>https://embracethered.com/blog/posts/2021/offensive-bpf-bpftrace-message-based/</guid>
      <description>This post is part of a series about Offensive BPF that I&amp;rsquo;m working on to learn how BPFs use will impact offensive security, malware and detection engineering. Click the &amp;ldquo;ebpf&amp;rdquo; tag to see all relevant posts.
In the last post we talked about a basic bpftrace script to install a BPF program that runs commands upon connecting from a specific IP with a specific magic source port.
This post will dive into this idea more by leveraging more a complex solution.</description>
    </item>
    
    <item>
      <title>Offensive BPF: Malicious bpftrace ðŸ¤¯</title>
      <link>https://embracethered.com/blog/posts/2021/offensive-bpf-bpftrace/</link>
      <pubDate>Tue, 05 Oct 2021 08:00:58 -0700</pubDate>
      
      <guid>https://embracethered.com/blog/posts/2021/offensive-bpf-bpftrace/</guid>
      <description>This post is part of a series about Offensive BPF that I&amp;rsquo;m working on to learn about BPF to understand attacks and defenses, click the &amp;ldquo;ebpf&amp;rdquo; tag to see all relevant posts.
I&amp;rsquo;m learning BPF to understand how its use will impact offensive security, malware, and detection engineering.
One offsec idea that quickly comes to mind with BPF is to observe network traffic and act upon specific events. So, I wanted to see if/how bpftrace, a popular tool for running BPF programs, can be used to create potential backdoors, and what evidence to look for as defenders.</description>
    </item>
    
    <item>
      <title>Offensive BPF! Getting started.</title>
      <link>https://embracethered.com/blog/posts/2021/offensive-bpf/</link>
      <pubDate>Thu, 30 Sep 2021 00:00:00 -0700</pubDate>
      
      <guid>https://embracethered.com/blog/posts/2021/offensive-bpf/</guid>
      <description>Over the last few years eBPF has gained a lot of traction in the Linux community and beyond.
eBPF&amp;rsquo;s offensive usage is also slowly getting more attention. So, I decided to dive into the topic from a red teaming point of view to learn about it to raise awareness and share the journey.
Similar to the format of my Machine Learning Attack Series, there will be a serious of posts around BPF usage in offensive settings, and also how its misuse can be detected.</description>
    </item>
    
    <item>
      <title>Video: Web Application Security Fundamentals</title>
      <link>https://embracethered.com/blog/posts/2021/web-application-security-fundamentals-video/</link>
      <pubDate>Mon, 06 Sep 2021 08:02:00 -0700</pubDate>
      
      <guid>https://embracethered.com/blog/posts/2021/web-application-security-fundamentals-video/</guid>
      <description>In this 25 minute video I&amp;rsquo;m explaining the foundations of Web Application Security.
The video covers the basic building blocks of web applications, such as HTML, HTTP, JavaScript and Cookies. Furthermore core web applications security concepts such as the Same-Origin Policy are discussed in detail.

The goal is to provide foundational knowledge to help grasp security vulnerabilities, such as XSS, CSRF, SQLi, tab-nabbing, etc. later on.
In the past I have trained and presented content like this to thousands of engineers at large organizations and cloud providers, hence its quite optimized for best learning and comprehension outcome.</description>
    </item>
    
  </channel>
</rss>